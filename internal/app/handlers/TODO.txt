go install -v golang.org/x/tools/cmd/godoc@latest
godoc -http=:8080

go install github.com/swaggo/swag/cmd/swag@latest
swag init --output ./swagger/

package main

import (
    "net/http"
    "time"
)

// @Title BucketStorage API
// @Description Сервис хранения данных bucket-ов.
// @Version 1.0

// @Contact.email support@ultimatestore.io

// @BasePath /api/v1
// @Host ultimatestore.io:8080

// @SecurityDefinitions.apikey ApiKeyAuth
// @In header
// @Name authorization

// @Tag.name Info
// @Tag.description "Группа запросов состояния сервиса"

// @Tag.name Storage
// @Tag.description "Группа для работы с данными внутри bucket-ов"

type (
    // HealthResponse содержит информацию о состоянии сервиса.
    HealthResponse struct {
        // Статус сервиса
        State string `json:"state" enums:"Bootstrap,Online,Failed" example:"Online"`
        // Время работы сервиса с последнего старта [с]
        UpTime int64 `json:"uptime" format:"seconds" example:"500"`
        // Доступное место [байт]
        FreeSpace int64 `json:"free_space" format:"bytes" example:"1048576"`
    }

    // BucketResponse содержит данные bucket-а с дополнительной метаинформацией.
    BucketResponse struct {
        Id        int64     `json:"id"`
        Data      string    `json:"data" format:"HEX / Base64" example:"48656c6c6f20776f726c6421"`
        UpdatedAt time.Time `json:"updated_at" format:"RFC3339" example:"2006-01-02T15:04:05.999999999Z07:00"`
    }

    // BucketRequest содержит запрос на обновление данных bucket-а.
    BucketRequest struct {
        Data string `json:"data" format:"HEX" example:"48656c6c6f20776f726c6421"`
    }
)

// Health godoc
// @Tags Info
// @Summary Запрос состояния сервиса
// @ID infoHealth
// @Accept  json
// @Produce json
// @Success 200 {object} HealthResponse
// @Failure 500 {string} string "Внутренняя ошибка"
// @Router /info/health [get]
func Health(w http.ResponseWriter, r *http.Request) {
    // опустим реализацию
}

// GetBucket godoc
// @Tags Storage
// @Summary Запрос содержимого bucket-а
// @Description Запрос содержимого bucket-а по ID
// @ID storageGetBucket
// @Accept  json
// @Produce json
// @Param bucket_id path int64 true "Bucket ID"
// @Param data_format query string false "Формат поля data" Enums(HEX, Base64) default(HEX)
// @Success 200 {object} BucketResponse
// @Failure 400 {string} string "Неверный запрос"
// @Failure 403 {string} string "Ошибка авторизации"
// @Failure 404 {string} string "Bucket не найден"
// @Failure 500 {string} string "Внутренняя ошибка"
// @Security ApiKeyAuth
// @Router /storage/bucket/{bucket_id} [get]
func GetBucket(w http.ResponseWriter, r *http.Response) {
    // опустим реализацию
}

// SetBucket godoc
// @Tags Storage
// @Summary Сохранение содержимого bucket-а
// @Description Создание нового / обновление существующего bucket-а по ID
// @ID storageSetBucket
// @Accept  json
// @Produce json
// @Param bucket_id path int64 true "Bucket ID"
// @Param bucket_data body BucketRequest true "Содержимое bucket-а"
// @Success 200 {string} string "OK"
// @Failure 400 {string} string "Неверный запрос"
// @Failure 403 {string} string "Ошибка авторизации"
// @Failure 500 {string} string "Внутренняя ошибка"
// @Security ApiKeyAuth
// @Router /storage/bucket/{bucket_id} [post]
func SetBucket(w http.ResponseWriter, r *http.Response) {
    // опустим реализацию
}

Чтобы посмотреть результат работы утилиты, скопируйте содержимое полученного файла swagger.yaml для примера выше и вставьте в левое поле сервиса Swagger Editor.

example: https://pkg.go.dev/sort

Код примеров оформляется почти так же, как тесты, — в файлах _test.go. Отличий всего два:
имя функции, содержащей пример, начинается с Example;
функция не принимает в качестве аргумента объект t *testing.T.
Чтобы указать, к какой функции или типу относится пример, нужно после Example дописать суффикс:
func ExampleFoo() — пример для функции Foo.
func ExampleFoo_second() — дополнительный пример для функции Foo с идентификатором second.
func ExampleMyType_String() — пример для метода String типа MyType.
func Example() — пример для всего пакета.

package retrier_test

import (
    "context"
    "fmt"
    "time"
)

func Example() {
    op := func(_ context.Context) error {
        return fmt.Errorf("что-то пошло не так")
    }

    // Определяем контекст с ограничением по времени.
    opCtx, opCancel := context.WithTimeout(context.Background(), 200*time.Millisecond)
    defer opCancel()

    // Выполняем операцию op, переопределяя стандартные значения min и max.
    retrier.Do(opCtx, op, retrier.WithMinMaxDelay(50*time.Millisecond, 1*time.Second))
}

func ExampleParseHexString() {
    out1, _ := retrier.ParseHexString("010203AABBCCDD")
    fmt.Println(out1)

    out2, _ := retrier.ParseHexString("0xFF")
    fmt.Println(out2)

    out3, _ := retrier.ParseHexString("invalid_hex_string")
    fmt.Println(out3)

    // Output:
    // [1 2 3 170 187 204 221]
    // [255]
    // []
}

Наличие в тесте Output:-комментария добавляет сравнение стандартного вывода с желаемым результатом.
Вот результат выполнения go test -v для функции ParseHexString:
=== RUN   ExampleParseHexString
--- PASS: ExampleParseHexString (0.00s)
PASS

package check

import "fmt"

func ExampleStudent_SetName() {
    var st Student

    st.SetName("gopher")
    fmt.Println(st.GetName())

    // Output:
    // Gopher
}

Вернёмся к тому, как выглядят примеры у пакета sort. Обратите внимание, что основной пример — не содержимое функции, а полноценный сниппет с импортами, типами, другими функциями и функцией main. Как сделать так же?
godoc автоматически добавляет всё содержимое файла в сниппет, если:
в файле существует только одна функция Example();
перед функцией Example() есть объявления типов и других функций.

Посмотрите код примера, из которого godoc сгенерировал сниппет:
https://go.dev/src/sort/example_interface_test.go

При этом godoc подменил package sort_test на package main, а func Example() на func main(), чтобы этот код можно было выполнять на странице документации.

Инкремент 17
Добавьте к основным экспортированным методам и переменным (хендлерам, публичным структурам и интерфейсам) в вашем проекте документацию в формате godoc.
Добавьте примеры работы с эндпоинтами практического трека в формате example_test.go.
Покрытие вашего кода тестами на данный момент должно быть не менее 40%.

для каждого инкремента новая ветка
каждый новый инкремент на основе предыдущей ветки
после выполнения каждого инкремента делайте PR, но не мержите в main
мержите в main после принятия ментором