// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/shortener.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ShortenerClient is the client API for Shortener service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ShortenerClient interface {
	// HandlerBatchPOST (/api/shorten/batch)
	AddBatch(ctx context.Context, in *AddBatchRequest, opts ...grpc.CallOption) (*AddBatchResponse, error)
	// HandlerJSONPOST (/api/shorten)
	AddLinkJSON(ctx context.Context, in *AddLinkJSONRequest, opts ...grpc.CallOption) (*AddLinkJSONResponse, error)
	// HandlerPOST
	AddLink(ctx context.Context, in *AddLinkRequest, opts ...grpc.CallOption) (*AddLinkResponse, error)
	// HandlerUseStorageDELETE (/api/user/urls)
	DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error)
	// HandlerUserStorageGET (/api/user/urls)
	GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*GetUserLinksResponse, error)
	// HandlerGET (/{ID})
	GetOriginalByShort(ctx context.Context, in *GetOriginalByShortRequest, opts ...grpc.CallOption) (*GetOriginalByShortResponse, error)
	// HandlerStats (/api/internal/stats)
	GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error)
	// HandlerPing (/ping)
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type shortenerClient struct {
	cc grpc.ClientConnInterface
}

func NewShortenerClient(cc grpc.ClientConnInterface) ShortenerClient {
	return &shortenerClient{cc}
}

func (c *shortenerClient) AddBatch(ctx context.Context, in *AddBatchRequest, opts ...grpc.CallOption) (*AddBatchResponse, error) {
	out := new(AddBatchResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/AddBatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) AddLinkJSON(ctx context.Context, in *AddLinkJSONRequest, opts ...grpc.CallOption) (*AddLinkJSONResponse, error) {
	out := new(AddLinkJSONResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/AddLinkJSON", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) AddLink(ctx context.Context, in *AddLinkRequest, opts ...grpc.CallOption) (*AddLinkResponse, error) {
	out := new(AddLinkResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/AddLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) DeleteLink(ctx context.Context, in *DeleteLinkRequest, opts ...grpc.CallOption) (*DeleteLinkResponse, error) {
	out := new(DeleteLinkResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/DeleteLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetUserLinks(ctx context.Context, in *GetUserLinksRequest, opts ...grpc.CallOption) (*GetUserLinksResponse, error) {
	out := new(GetUserLinksResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetUserLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetOriginalByShort(ctx context.Context, in *GetOriginalByShortRequest, opts ...grpc.CallOption) (*GetOriginalByShortResponse, error) {
	out := new(GetOriginalByShortResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetOriginalByShort", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) GetStats(ctx context.Context, in *GetStatsRequest, opts ...grpc.CallOption) (*GetStatsResponse, error) {
	out := new(GetStatsResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/GetStats", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *shortenerClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/shortener.Shortener/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShortenerServer is the server API for Shortener service.
// All implementations must embed UnimplementedShortenerServer
// for forward compatibility
type ShortenerServer interface {
	// HandlerBatchPOST (/api/shorten/batch)
	AddBatch(context.Context, *AddBatchRequest) (*AddBatchResponse, error)
	// HandlerJSONPOST (/api/shorten)
	AddLinkJSON(context.Context, *AddLinkJSONRequest) (*AddLinkJSONResponse, error)
	// HandlerPOST
	AddLink(context.Context, *AddLinkRequest) (*AddLinkResponse, error)
	// HandlerUseStorageDELETE (/api/user/urls)
	DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error)
	// HandlerUserStorageGET (/api/user/urls)
	GetUserLinks(context.Context, *GetUserLinksRequest) (*GetUserLinksResponse, error)
	// HandlerGET (/{ID})
	GetOriginalByShort(context.Context, *GetOriginalByShortRequest) (*GetOriginalByShortResponse, error)
	// HandlerStats (/api/internal/stats)
	GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error)
	// HandlerPing (/ping)
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	mustEmbedUnimplementedShortenerServer()
}

// UnimplementedShortenerServer must be embedded to have forward compatible implementations.
type UnimplementedShortenerServer struct {
}

func (UnimplementedShortenerServer) AddBatch(context.Context, *AddBatchRequest) (*AddBatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBatch not implemented")
}
func (UnimplementedShortenerServer) AddLinkJSON(context.Context, *AddLinkJSONRequest) (*AddLinkJSONResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLinkJSON not implemented")
}
func (UnimplementedShortenerServer) AddLink(context.Context, *AddLinkRequest) (*AddLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLink not implemented")
}
func (UnimplementedShortenerServer) DeleteLink(context.Context, *DeleteLinkRequest) (*DeleteLinkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedShortenerServer) GetUserLinks(context.Context, *GetUserLinksRequest) (*GetUserLinksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLinks not implemented")
}
func (UnimplementedShortenerServer) GetOriginalByShort(context.Context, *GetOriginalByShortRequest) (*GetOriginalByShortResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOriginalByShort not implemented")
}
func (UnimplementedShortenerServer) GetStats(context.Context, *GetStatsRequest) (*GetStatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStats not implemented")
}
func (UnimplementedShortenerServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedShortenerServer) mustEmbedUnimplementedShortenerServer() {}

// UnsafeShortenerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShortenerServer will
// result in compilation errors.
type UnsafeShortenerServer interface {
	mustEmbedUnimplementedShortenerServer()
}

func RegisterShortenerServer(s grpc.ServiceRegistrar, srv ShortenerServer) {
	s.RegisterService(&Shortener_ServiceDesc, srv)
}

func _Shortener_AddBatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddBatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).AddBatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/AddBatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).AddBatch(ctx, req.(*AddBatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_AddLinkJSON_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLinkJSONRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).AddLinkJSON(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/AddLinkJSON",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).AddLinkJSON(ctx, req.(*AddLinkJSONRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_AddLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).AddLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/AddLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).AddLink(ctx, req.(*AddLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteLinkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/DeleteLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).DeleteLink(ctx, req.(*DeleteLinkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetUserLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLinksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetUserLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetUserLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetUserLinks(ctx, req.(*GetUserLinksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetOriginalByShort_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOriginalByShortRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetOriginalByShort(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetOriginalByShort",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetOriginalByShort(ctx, req.(*GetOriginalByShortRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_GetStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetStatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).GetStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/GetStats",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).GetStats(ctx, req.(*GetStatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Shortener_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShortenerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/shortener.Shortener/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShortenerServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shortener_ServiceDesc is the grpc.ServiceDesc for Shortener service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shortener_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "shortener.Shortener",
	HandlerType: (*ShortenerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddBatch",
			Handler:    _Shortener_AddBatch_Handler,
		},
		{
			MethodName: "AddLinkJSON",
			Handler:    _Shortener_AddLinkJSON_Handler,
		},
		{
			MethodName: "AddLink",
			Handler:    _Shortener_AddLink_Handler,
		},
		{
			MethodName: "DeleteLink",
			Handler:    _Shortener_DeleteLink_Handler,
		},
		{
			MethodName: "GetUserLinks",
			Handler:    _Shortener_GetUserLinks_Handler,
		},
		{
			MethodName: "GetOriginalByShort",
			Handler:    _Shortener_GetOriginalByShort_Handler,
		},
		{
			MethodName: "GetStats",
			Handler:    _Shortener_GetStats_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _Shortener_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/shortener.proto",
}
