Инкремент 19
Добавьте в пакет cmd/shortener (для трека «Сервис сокращения URL») или cmd/server и cmd/agent (для трека «Сервис сбора метрик и алертинга») глобальные переменные:
var buildVersion string,
var buildDate string,
var buildCommit string.
При старте приложения выводите в stdout сообщение в следующем формате:
Build version: <buildVersion> (или "N/A" при отсутствии значения)
Build date: <buildDate> (или "N/A" при отсутствии значения)
Build commit: <buildCommit> (или "N/A" при отсутствии значения)
Покрытие вашего кода автотестами на данный момент должно быть не менее 55%.

Теория:
Флаги линковщика
Процесс сборки приложения в компилируемых языках обычно включает две фазы:
Компиляцию отдельных участков кода, файлов, библиотек в бинарный код.
Окончательную сборку этих юнитов и зависимостей в один исполняемый бинарник.
На второй фазе компиляции система использует линковщик.
Go не исключение. Предкомпилированные для дальнейшего использования библиотеки можно увидеть в папке $GOPATH/pkg/, а пакеты стандартной библиотеки — в папке $GOROOT/pkg/. Файлы, подготовленные для сборки на nix-системах, имеют расширение .a — например, crypto.a.
Линковщик запускается автоматически при выполнении команд go build и go install. Также его можно вызвать командой:
go tool link [flags] main.a
По традиции линковщик обозначают аббревиатурой ld, а предназначенные ему флаги — ldflags. При сборке Go-проекта вы можете указать флаги линковщика с помощью параметра -ldflags. Например:
go build -ldflags "-H windowsgui" — скомпилирует GUI-версию для Windows без консольного окна;
go build -ldflags "-s -w" — скомпилирует исполняемый файл меньшего размера, так как в него не будет включена таблица символов и отладочная информация.
Параметр ldflags позволяет определить значение строковых переменных в момент сборки проекта. Для этих целей существует флаг -X 'importpath.name=value', где:
importpath — импортируемое имя пакета, которое содержит переменную name;
value — присваиваемое значение.
Если значение не содержит пробелов, кавычки можно опустить. Также вы можете последовательно указать несколько флагов -X.
Предположим, в программе нужно использовать номер версии, взятой из других источников, и время сборки приложения. Для начала нужно определить две глобальные строковые переменные, в которые будут записываться соответствующие значения.
var (
    Version   string
    BuildTime string
)

func main() {
    fmt.Printf("version=%s, time=%s\n", Version, BuildTime)
}
Если скомпилировать и запустить эту программу, она выведет version=, time=, так как обе переменные по умолчанию равны пустым строкам. Запустим программу с использованием флага -X.
go run -ldflags "-X main.Version=v1.0.1" main.go
Получим version=v1.0.1, time=, что соответствует ожиданиям.